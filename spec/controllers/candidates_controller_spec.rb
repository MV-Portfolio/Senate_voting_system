require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe CandidatesController, type: :controller do

  # # This should return the minimal set of attributes required to create a valid
  # # Candidate. As you add validations to Candidate, be sure to
  # # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   skip("Add a hash of attributes valid for your model")
  # }

  # let(:invalid_attributes) {
  #   skip("Add a hash of attributes invalid for your model")
  # }

  # # This should return the minimal set of values that should be in the session
  # # in order to pass any filters (e.g. authentication) defined in
  # # CandidatesController. Be sure to keep this updated too.
  # let(:valid_session) { {} }

  # describe "GET #index" do
  #   it "returns a success response" do
  #     Candidate.create! valid_attributes
  #     get :index, params: {}, session: valid_session
  #     expect(response).to be_successful
  #   end
  # end

  # describe "GET #show" do
  #   it "returns a success response" do
  #     candidate = Candidate.create! valid_attributes
  #     get :show, params: {id: candidate.to_param}, session: valid_session
  #     expect(response).to be_successful
  #   end
  # end

  # describe "GET #new" do
  #   it "returns a success response" do
  #     get :new, params: {}, session: valid_session
  #     expect(response).to be_successful
  #   end
  # end

  # describe "GET #edit" do
    
  #   end

  #   it "returns a success response" do
  #     candidate = Candidate.create! valid_attributes
  #     get :edit, params: {id: candidate.to_param}, session: valid_session
  #     expect(response).to be_successful
  #   end
  # end

  describe "POST #create" do
    context "adding a new candidate with valid parameters" do
      let(:party) { FactoryBot.create(:party) }
      let(:candidate_attributes) { FactoryBot.attributes_for(:candidate, :party => party) }

      it "should increase party candidate count" do
        expect {
          post :create, params: {party_id: party.id, candidate: candidate_attributes}
        }.to change(party.candidates, :count).by(1)
      end

      it "should add the candidate to the party" do
        post :create, params: {party_id: party.id, candidate: candidate_attributes}
        expect(party.candidates.pluck(:given_name)).to include candidate_attributes[:given_name]
        expect(party.candidates.pluck(:surname)).to include candidate_attributes[:surname]
      end

      it "should add the candidate at last position" do
        post :create, params: {party_id: party.id, candidate: candidate_attributes}
        new_party_candidate = Candidate.where(given_name: candidate_attributes[:given_name], surname: candidate_attributes[:surname])
        expect(new_party_candidate.first.party_pos).to be 0
      end

      it "should redirect to the party show page" do
        post :create, params: {party_id: party.id, candidate: candidate_attributes}
        expect(response).to redirect_to party
      end

      it "should have a successful creation notice message" do
        post :create, params: {party_id: party.id, candidate: candidate_attributes}
        expect(flash[:notice]).to eq("Candidate was successfully created.")
      end
    end

    context "adding a new candidate with invalid parameters" do
      let(:party) { FactoryBot.create(:party) }
      let(:invalid_candidate_attributes) { FactoryBot.attributes_for(:invalid_candidate, :party => party) }

      it "should not increase party candidate count" do
        expect {
          post :create, params: {party_id: party.id, candidate: invalid_candidate_attributes}
        }.not_to change(party.candidates, :count).from(0)
      end

      it "should redirect to candidate new page" do
        post :create, params: {party_id: party.id, candidate: invalid_candidate_attributes}
        expect(response).to redirect_to new_party_candidate_path(party)
      end
    end
  end

  describe "PUT #update" do
    context "updating a candidate with valid information" do
      let!(:party) { FactoryBot.create(:party) }
      let(:candidate_attributes) { FactoryBot.attributes_for(:candidate, :party => party) }

      it "should update candidate information to new information" do
        candidate = FactoryBot.create(:candidate, :party => party)
        put :update, params: {party_id: party, id: candidate, candidate: candidate_attributes}
        expect(Candidate.find(1).attributes).to include(candidate_attributes.stringify_keys)
      end

      it "should redirect to party edit page" do
        candidate = FactoryBot.create(:candidate, :party => party)
        put :update, params: {party_id: party, id: candidate, candidate: candidate_attributes}
        expect(response).to redirect_to edit_party_path(party)
      end

      it "should have a notice of successful update of candidate information" do
        candidate = FactoryBot.create(:candidate, :party => party)
        put :update, params: {party_id: party, id: candidate, candidate: candidate_attributes}
        expect(flash[:notice]).to eq("Candidate was successfully updated.")
      end
    end

    context "updating a candidate with invalid information" do
      let!(:party) { FactoryBot.create(:party) }
      let(:invalid_candidate_attributes) { FactoryBot.attributes_for(:invalid_candidate, :party => party) }

      it "should not update candidate information" do
        candidate = FactoryBot.create(:candidate, :party => party)
        original_candidate_attributes = Candidate.where(id: 1).pluck(:given_name, :surname, :division_name, :party_pos)
        put :update, params: {party_id: party, id: candidate, candidate: invalid_candidate_attributes}
        expect(Candidate.where(id: 1).pluck(:given_name, :surname, :division_name, :party_pos)).to eq(original_candidate_attributes)
      end

      it "should redirect to candidate edit page" do
        candidate = FactoryBot.create(:candidate, :party => party)
        put :update, params: {party_id: party, id: candidate, candidate: invalid_candidate_attributes}
        expect(response).to redirect_to edit_party_candidate_path(party)
      end
    end
  end

  describe "DELETE #destroy" do
    context "deleting a candidate from a party" do
      let!(:party) { FactoryBot.create(:party) }

      it "should decrease candidate count by one" do
        candidate = FactoryBot.create(:candidate, party: party)
        expect {
          delete :destroy, params: {party_id: party, id: candidate}
        }.to change(party.candidates, :count).by(-1)
      end

      it "should rearrange other candidate party position accordingly" do
        FactoryBot.create_list(:candidate, 5, party: party)
        delete :destroy, params: {party_id: party, id: party.candidates.find(3)}
        expect(party.candidates.find(4).party_pos).to eq 2
      end

      it "should pass a notice of successful candidate deletion" do
        candidate = FactoryBot.create(:candidate, party: party)
        delete :destroy, params: {party_id: party, id: candidate}       
        expect(flash[:notice]).to eq("#{candidate.given_name} #{candidate.surname} was successfully removed.")      
      end

      it "should redirect to party edit page" do
        candidate = FactoryBot.create(:candidate, party: party)
        delete :destroy, params: {party_id: party, id: candidate}       
        expect(response).to redirect_to edit_party_path(party)
      end
    end
  end

  # describe "DELETE #destroy" do
  #   it "destroys the requested candidate" do
  #     candidate = Candidate.create! valid_attributes
  #     expect {
  #       delete :destroy, params: {id: candidate.to_param}, session: valid_session
  #     }.to change(Candidate, :count).by(-1)
  #   end

  #   it "redirects to the candidates list" do
  #     candidate = Candidate.create! valid_attributes
  #     delete :destroy, params: {id: candidate.to_param}, session: valid_session
  #     expect(response).to redirect_to(candidates_url)
  #   end
  # end

end
